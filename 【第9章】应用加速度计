
package com.example.myamap;

import androidx.appcompat.app.AppCompatActivity;
import android.app.Service;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Vibrator;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

public class MainActivity extends AppCompatActivity implements SensorEventListener {

    private Button btn;
    private SensorManager manager;
    private Vibrator vibrator;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        manager = (SensorManager) getSystemService(SENSOR_SERVICE);
        vibrator = (Vibrator) getApplication().getSystemService(Service.VIBRATOR_SERVICE);  // 获取系统振动服务
        btn = findViewById(R.id.btn);
        btn.setOnClickListener(new mClick());
    }

    class mClick implements View.OnClickListener {
        @Override
        public void onClick(View view) {
            try {
                vibrator.vibrate(new long[]{100, 100, 100, 1000}, 0);  // 周期性振动，-1表示只进行一个周期，0表示无限循环
            } catch (Exception e) {

            }
        }

    }

    @Override
    protected void onResume() {
        super.onResume();
        manager.registerListener(this, manager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),SensorManager.SENSOR_DELAY_NORMAL); // 为加速度注册监听器
    }

    @Override
    public void onSensorChanged(SensorEvent sensorEvent) {
        int sensorType = sensorEvent.sensor.getType();
        float[] val = sensorEvent.values;
        if (sensorType == Sensor.TYPE_ACCELEROMETER) {
            if (Math.abs(val[0]) > 14 || Math.abs(val[1]) > 14 || Math.abs(val[2]) > 14) {
                vibrator.cancel(); // 当加速度过大的时候停止振动
                Toast.makeText(this, "加速度过大，已停止振动~", Toast.LENGTH_SHORT).show();
            }
        }
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int i) {

    }

}
